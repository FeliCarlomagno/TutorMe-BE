package com.auth.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.auth.entity.User;
import com.auth.payload.JWTAuthResponse;
import com.auth.payload.LoginDto;
import com.auth.payload.RegisterDto;
import com.auth.service.AuthService;
import com.auth.service.AuthServiceImpl;
import com.tutorMe.model.Annuncio;
import com.tutorMe.service.AnnuncioService;

import jakarta.persistence.EntityNotFoundException;



@RestController
@RequestMapping("/api/auth")
public class AuthController {
	
	@Autowired AuthServiceImpl userServiceImpl;
	@Autowired AnnuncioService annuncioService;
    private AuthService authService;

    public AuthController(AuthService authService) {
        this.authService = authService;
    }

    // Build Login REST API
    @PostMapping(value = {"/login", "/signin"})
    public ResponseEntity<JWTAuthResponse> login(@RequestBody LoginDto loginDto){
           	
    	String token = authService.login(loginDto);

        JWTAuthResponse jwtAuthResponse = new JWTAuthResponse();
        jwtAuthResponse.setUsername(loginDto.getUsername());
        jwtAuthResponse.setAccessToken(token);

        return ResponseEntity.ok(jwtAuthResponse);
    }

    // Build Register REST API
    @PostMapping(value = {"/register", "/signup"})
    public ResponseEntity<String> register(@RequestBody RegisterDto registerDto){
        String response = authService.register(registerDto);
        return new ResponseEntity<>(response, HttpStatus.CREATED);
    }
    
  //-----------------------------------------------------METODI ----------------------------------------------------------------------------------------//  
    @GetMapping("/listaUtenti")
    public ResponseEntity<?> recuperaUtenti(){
    	return new ResponseEntity<>(userServiceImpl.findtAllUser(),HttpStatus.OK);
    }
    
    @GetMapping("/listaUtenti/paginati")
    public ResponseEntity<?> recuperaUtentiPageable(Pageable pageable){
    	try {
			return new ResponseEntity<>(userServiceImpl.getAllUserPageable(pageable),HttpStatus.FOUND);
		} catch (Exception e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
    }
    
    @GetMapping("/listaUtenti/paginatiPerNome")
    public ResponseEntity<?> recuperaUtentiPageableByNome(Pageable pageable){
    	try {
    		return new ResponseEntity<>(userServiceImpl.getAllUserPageableByName(),HttpStatus.FOUND);
		} catch (Exception e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
    }
    
    @GetMapping("/trovaUtente/{id}")
    public ResponseEntity<?> trovaUtente (@PathVariable Long id){
    	try {
			return new ResponseEntity<>(userServiceImpl.findById(id),HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
    }
    
    @PutMapping("/modificaUtente/{id}")
    public ResponseEntity<?> modificaUtente(@RequestBody User u, @PathVariable Long id){
    	u.setId(id);
    	try {
			return new ResponseEntity<User>(userServiceImpl.editUser(u),HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
    }
    
    @DeleteMapping("/eliminaUtente/{id}")
    public ResponseEntity<?> eliminaUtente(@PathVariable Long id){
    	try {
			return new ResponseEntity<>(userServiceImpl.deleteUserById(id), HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
    }
    
    //METODI ANNUNCIO:
    //CREA ANNUNCIO ENDPOINT QUI:
    
    @PostMapping("/creaAnnuncio")
    public ResponseEntity<?> creaAnnuncio(@RequestBody Annuncio a){
    	try {
			return new ResponseEntity<>(annunci)
		} catch (Exception e) {
			
		}
    }
    
    
}

package com.tutorMe.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.tutorMe.model.Insegnante;
import com.tutorMe.repository.InsegnanteRepository;

import jakarta.persistence.EntityExistsException;
import jakarta.persistence.EntityNotFoundException;

@Service
public class InsegnanteService {
	
	@Autowired InsegnanteRepository insegnanteRepository;
	
	public List<Insegnante> findAllInsegnanti(){
		return insegnanteRepository.findAll();
	}
	
	//FIND BY MATERIA DA INSERIRE
	
	
	public Insegnante findById(Long id) {
		if(!insegnanteRepository.existsById(id)) {
			throw new EntityNotFoundException("Nessun insegnante associato a questo ID");
		}
		return insegnanteRepository.findById(id).get();
	}
	
	public List<Insegnante> findByCitta(String citta){
		if(!insegnanteRepository.findAll().isEmpty()) {
			throw new EntityNotFoundException("Nessuno studente in archivio");
		}
		return insegnanteRepository.findByCity(citta);
	}
	
	public List<Insegnante> findByParteDelNome(String parteNome){
		if(!insegnanteRepository.findAll().isEmpty()) {
			throw new EntityNotFoundException("Archivio Insegnanti vuoto");
		}
		
		return insegnanteRepository.findByParteDelNome(parteNome);
	}
	
	
	public Page<Insegnante> getAllInsegnantiPageable(Pageable pageable){
		if(insegnanteRepository.findAll().isEmpty()) {
			throw new EntityNotFoundException("Nessuno insegnante in archivio");
		}
		return insegnanteRepository.findAll(pageable);
	}
	
	
	public List<Insegnante> getAllInsegnantiPageabeleByName(){
		if(insegnanteRepository.findAll().isEmpty()) {
			throw new EntityNotFoundException("Nessuno insegnante in archivio");
		}
		return insegnanteRepository.findAllOrderByName();
	}
	
	
	public String addinsegnante(Insegnante insegnante) {
		if(insegnanteRepository.existsById(insegnante.getId())) {
			throw new EntityExistsException("Impossibile aggiungere l'insegnante poichè ne esiste già uno con questo ID");
		}
		insegnanteRepository.save(insegnante);
		return "Insegnante aggiunto correttamente nel Database";
	}
	
	
	public String deleteInsegnanteById(Long id) {
		if(!insegnanteRepository.existsById(id)) {
			throw new EntityNotFoundException("Nessuno insegnante trovato con questo ID");
		}
		insegnanteRepository.deleteById(id);
		return "Insegnante eliminato correttamente dal Database";
	}
	
	public Insegnante editInsegnante(Insegnante insegnante) {
		if(!insegnanteRepository.existsById(insegnante.getId())) {
			throw new EntityNotFoundException("Impossibile aggiornate l'insegnante, poichè non esiste nessuno insegnante con questo ID");
		}
		return insegnanteRepository.save(insegnante);
	}
}

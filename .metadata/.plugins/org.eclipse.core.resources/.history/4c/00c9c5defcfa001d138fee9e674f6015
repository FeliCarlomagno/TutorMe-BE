package com.tutorMe.service;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.auth.entity.User;
import com.auth.repository.UserRepository;
import com.tutorMe.model.Annuncio;
import com.tutorMe.model.Prenotazione;
import com.tutorMe.repository.AnnuncioRepository;
import com.tutorMe.repository.PrenotazioneRepository;


import jakarta.persistence.EntityExistsException;
import jakarta.persistence.EntityNotFoundException;

@Service
public class PrenotazioneService {
	
	@Autowired PrenotazioneRepository prenotazioneRepository;;
	@Autowired UserRepository userRepository;
	@Autowired AnnuncioRepository annuncioRepsitory;
	
	//@Autowired @Qualifier ("prenotazioneCustom") ObjectProvider<Prenotazione> prenotazione;
	
	public String addPrenotazione(Prenotazione prenotazione) {
		if(prenotazioneRepository.existsById(prenotazione.getId())) {
			throw new EntityExistsException("Prenotazione già esistente con questo ID");
		}
		prenotazioneRepository.save(prenotazione);
		return "Prenotazione aggiunta correttamente!";
	}
	
	public List<Prenotazione> findAllPrenotazioni(){
		return prenotazioneRepository.findAll();
	}
	
	public Prenotazione findById(Long id) {
		if(!prenotazioneRepository.existsById(id)) {
			throw new EntityNotFoundException("Nessuna prenotazione esistente con questo ID");
		}
		return prenotazioneRepository.findById(id).get();
	}
	
	public Page<Prenotazione> getAllPrenotazioniPageable(Pageable pageable){
		if(prenotazioneRepository.findAll().isEmpty()) {
			throw new EntityNotFoundException("Nessuna prenotazione esistente nel Database");
		}
		return prenotazioneRepository.findAll(pageable);
	}
	
	//METODO FINDBYUTENTE:
	public List<Prenotazione> findByUtente(Long idUser){
		if(!userRepository.existsById(idUser)) {
			throw new EntityNotFoundException("Nessuna prenotazione associata a questo Studente ");	
		} return prenotazioneRepository.findByPrenotazioneAndStudente(idUser);
	}
	
	
	
	// METODO FINDBYDATA:
	public List<Prenotazione> findByData(Date data){
		return prenotazioneRepository.findByDataPrenotazione(data);
	}
	
	
	public String deletePrenotazione(Long id) {
		if(!prenotazioneRepository.existsById(id)) {
			throw new EntityNotFoundException("Nessuna Prenotazione esistente con questo ID");
		}
		prenotazioneRepository.deleteById(id);
		return "Prenotazione eliminata con successo";
	}
	
	public Prenotazione editPrenotazione(Prenotazione prenotazione) {
		if(!prenotazioneRepository.existsById(prenotazione.getId())) {
			throw new EntityNotFoundException("Impossibile aggiornare la prenotazione poichè non esiste una prenotazione con questo ID");
		}
		return prenotazioneRepository.save(prenotazione);
	}
	
	public List<Prenotazione> findByUserAndDate(User u, Date data){
		return prenotazioneRepository.listByUserAndDate(u, data);
	}
	
	
	public Prenotazione effettuaPrenotazioneDaAnnuncio(Annuncio annuncio, Prenotazione p, User userPrenotante) {
		if(annuncioRepsitory.existsById(annuncio.getId())) {
			Annuncio a = annuncioRepsitory.findById(annuncio.getId()).get();
			a.getListaPrenotazioni().add(p);
			p.setAnnuncio(annuncio);
			p.setUserPrenotante(userPrenotante);
			userPrenotante.getListaPrenotazioni().add(p);
			
			return prenotazioneRepository.save(p);
		}else {
			throw new EntityNotFoundException("Impossibile effettuare la prenotazione, annuncio non esistente");
		}
	}
	
	
//	public Prenotazione creaPrenotazioneDaAnnuncio (Annuncio annuncio, User user,Date dataPrenotazione) {
//		Prenotazione p = new Prenotazione();
//		p.setAnnuncio(annuncio);
//		p.setUser(annuncio.getUser());
//		p.setUserPrenotante(user);
//		p.setDataPrenotazione(dataPrenotazione);
//		//p.setMateriaPrenotazione(annuncio.getMateria()); <-- DA MODIFICARE PERCHE' E' UN ARRAY
//		prenotazioneRepository.save(p);
//		return p;
//	}
		
	
	
//	//METODO ASSOCIA PRENOTAZIONE:
//	public String associaPrenotazione(Prenotazione p, User u1, User u2) {
//		if(userRepository.existsById(u1.getId()) && userRepository.existsById(u2.getId())) {
//			p.setUser(u1);
//			p.setUser(u2);
//			u1.getListaPrenotazioni().add(p);
//			u2.getListaPrenotazioni().add(p);
//			prenotazioneRepository.save(p);
//			
//			return "Prenotazione associata";
//		}else{
//			throw new EntityExistsException("Studente,Insegnante o Prenotazione non trovati!");
//		}
//	}
//	
//	//METOODO ASSOCIA PRENOTAZIONE ESISTENTE:
//	
//	public String associaPrenotazioneEsistente(Long idPrenotazione, Long idUser, Long idInsegnante) {
//		if(prenotazioneRepository.existsById(idPrenotazione) && userRepository.existsById(idUser) && insegnanteRepository.existsById(idInsegnante)) {
//			Prenotazione p = prenotazioneRepository.findById(idPrenotazione).get();
//			User u = userRepository.findById(idUser).get();
//			Insegnante i = insegnanteRepository.findById(idInsegnante).get();
//			
//			u.getListaPrenotazioni().add(p);
//			i.getListaPrenotazioni().add(p);
//			p.setUser(u);
//			p.setInsegnante(i);
//			
//			prenotazioneRepository.save(p);
//			userRepository.save(u);
//			insegnanteRepository.save(i);
//			
//			return "Prenotazione associata correttamente";
//		}throw new EntityNotFoundException("Prenotazione,Studente o Insegnante non esistenti");
//	}
	
}

package com.tutorMe.service;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.auth.entity.User;
import com.auth.repository.UserRepository;
import com.tutorMe.model.Insegnante;
import com.tutorMe.model.Prenotazione;
import com.tutorMe.model.Studente;
import com.tutorMe.repository.InsegnanteRepository;
import com.tutorMe.repository.PrenotazioneRepository;
import com.tutorMe.repository.StudenteRepository;

import jakarta.persistence.EntityExistsException;
import jakarta.persistence.EntityNotFoundException;

@Service
public class PrenotazioneService {
	
	@Autowired PrenotazioneRepository prenotazioneRepository;
	@Autowired InsegnanteRepository insegnanteRepository;
//	@Autowired StudenteRepository studenteRepository;
	@Autowired UserRepository userRepository;
	
	public String addPrenotazione(Prenotazione prenotazione) {
		if(prenotazioneRepository.existsById(prenotazione.getId())) {
			throw new EntityExistsException("Prenotazione già esistente con questo ID");
		}
		prenotazioneRepository.save(prenotazione);
		return "Prenotazione aggiunta correttamente!";
	}
	
	public List<Prenotazione> findAllPrenotazioni(){
		return prenotazioneRepository.findAll();
	}
	
	public Prenotazione findById(Long id) {
		if(!prenotazioneRepository.existsById(id)) {
			throw new EntityNotFoundException("Nessuna prenotazione esistente con questo ID");
		}
		return prenotazioneRepository.findById(id).get();
	}
	
	public Page<Prenotazione> getAllPrenotazioniPageable(Pageable pageable){
		if(!prenotazioneRepository.findAll().isEmpty()) {
			throw new EntityNotFoundException("Nessuna prenotazione esistente nel Database");
		}
		return prenotazioneRepository.findAll(pageable);
	}
	
	//METODO FINDBYSTUDENTE:
	public List<Prenotazione> findByUtente(Long idUser){
		if(!userRepository.existsById(idUser)) {
			throw new EntityNotFoundException("Nessuna prenotazione associata a questo Studente ");	
		} return prenotazioneRepository.findByPrenotazioneAndStudente(idUser);
	}
	
	//METODO FINDBYINSEGNATE:
	public List<Prenotazione> findByInsegnante( Long idInsegnante){
		if(!insegnanteRepository.existsById(idInsegnante)) {
			throw new EntityNotFoundException("Nessuna prenotazione associata a questo Insegnante");
		}
		return prenotazioneRepository.findByPrenotazioneAndInsegnante(idInsegnante);
	}
	
	// METODO FINDBYDATA:
	public List<Prenotazione> findByData(Date data){
		return prenotazioneRepository.findByDataPrenotazione(data);
	}
	
	
	public String deletePrenotazione(Long id) {
		if(!prenotazioneRepository.existsById(id)) {
			throw new EntityNotFoundException("Nessuna Prenotazione esistente con questo ID");
		}
		prenotazioneRepository.deleteById(id);
		return "Prenotazione eliminata con successo";
	}
	
	public Prenotazione editPrenotazione(Prenotazione prenotazione) {
		if(!prenotazioneRepository.existsById(prenotazione.getId())) {
			throw new EntityNotFoundException("Impossibile aggiornare la prenotazione poichè non esiste una prenotazione con questo ID");
		}
		return prenotazioneRepository.save(prenotazione);
	}
	
	//METODO ASSOCIA PRENOTAZIONE:
	public String associaPrenotazioneAInsegnanteEstudente(Prenotazione p, User u, Insegnante i) {
		if(insegnanteRepository.existsById(i.getId()) && userRepository.existsById(u.getId())) {
			p.setInsegnante(i);
			p.setUser(u);
			i.getListaPrenotazioni().add(p);
			u.getListaPrenotazioni().add(p);
			prenotazioneRepository.save(p);
			
			return "Prenotazione associata";
		}else{
			throw new EntityExistsException("Studente,Insegnante o Prenotazione non trovati!");
		}
	}
	
	//METOODO ASSOCIA PRENOTAZIONE ESISTENTE:
	
	public String associaPrenotazioneEsistente(Long idPrenotazione, Long idUser, Long idInsegnante) {
		if(prenotazioneRepository.existsById(idPrenotazione) && studenteRepository.existsById(idUser) && insegnanteRepository.existsById(idInsegnante)) {
			Prenotazione p = prenotazioneRepository.findById(idPrenotazione).get();
			Studente s = studenteRepository.findById(idStudente).get();
			Insegnante i = insegnanteRepository.findById(idInsegnante).get();
			
			s.getListaPrenotazioni().add(p);
			i.getListaPrenotazioni().add(p);
			p.setStudente(s);
			p.setInsegnante(i);
			
			prenotazioneRepository.save(p);
			studenteRepository.save(s);
			insegnanteRepository.save(i);
			
			return "Prenotazione associata correttamente";
		}throw new EntityNotFoundException("Prenotazione,Studente o Insegnante non esistenti");
	}
	
}
